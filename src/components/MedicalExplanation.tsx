import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Brain, MessageSquare, RefreshCw, Download, Share } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface AnalysisData {
  cellCounts: {
    neutrophils: number;
    lymphocytes: number;
    monocytes: number;
    eosinophils: number;
    basophils: number;
    platelets: number;
    rbcs: number;
  };
  diseases: {
    name: string;
    confidence: number;
    severity: 'low' | 'medium' | 'high';
  }[];
  abnormalities: string[];
}

interface MedicalExplanationProps {
  analysisData: AnalysisData;
  onNewAnalysis: () => void;
}

export const MedicalExplanation: React.FC<MedicalExplanationProps> = ({ 
  analysisData, 
  onNewAnalysis 
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [explanation, setExplanation] = useState('');
  const [followUpQuestion, setFollowUpQuestion] = useState('');
  const { toast } = useToast();

  const generateExplanation = async () => {
    setIsGenerating(true);
    
    // Simulate AI explanation generation (in a real app, this would call an LLM API)
    setTimeout(() => {
      const mockExplanation = `Based on the blood cell analysis results, here are the key medical insights:

**White Blood Cell Differential Analysis:**
The neutrophil count of ${analysisData.cellCounts.neutrophils}% suggests an active immune response, which could indicate bacterial infection or inflammatory process. The lymphocyte percentage of ${analysisData.cellCounts.lymphocytes}% is within normal range but on the lower end, which often accompanies acute bacterial infections.

**Red Blood Cell and Platelet Assessment:**
The red blood cell count of ${analysisData.cellCounts.rbcs.toLocaleString()}/μL and platelet count of ${analysisData.cellCounts.platelets.toLocaleString()}/μL both fall within normal ranges, indicating adequate oxygen-carrying capacity and clotting function.

**Clinical Interpretation:**
${analysisData.diseases.length > 0 
  ? `The AI model has identified potential ${analysisData.diseases[0].name.toLowerCase()} with ${analysisData.diseases[0].confidence}% confidence. This finding is supported by the cellular morphology patterns and differential count abnormalities.`
  : 'The blood sample shows normal cellular patterns with no significant pathological indicators.'
}

**Recommendations:**
1. Clinical correlation with patient symptoms and history
2. Consider additional laboratory tests if symptoms persist
3. Monitor for changes in blood counts over time
4. Consult with hematology if abnormal findings persist

*This analysis is generated by an AI system trained on extensive hematological data and should be used as a diagnostic aid alongside clinical judgment.*`;

      setExplanation(mockExplanation);
      setIsGenerating(false);
    }, 2000);
  };

  const handleFollowUpQuestion = () => {
    if (!followUpQuestion.trim()) return;
    
    toast({
      title: "Question Submitted",
      description: "Your follow-up question will be processed by the medical AI assistant.",
    });
    
    setFollowUpQuestion('');
  };

  const downloadReport = () => {
    const reportData = {
      timestamp: new Date().toISOString(),
      cellCounts: analysisData.cellCounts,
      diseases: analysisData.diseases,
      abnormalities: analysisData.abnormalities,
      explanation: explanation
    };

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { 
      type: 'application/json' 
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `blood-analysis-report-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Analysis report has been saved to your device.",
    });
  };

  const shareReport = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Blood Cell Analysis Report',
          text: 'Medical analysis report generated by BloodCell AI',
          url: window.location.href
        });
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Link Copied",
        description: "Report link has been copied to clipboard.",
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* AI Medical Explanation */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-primary" />
            AI Medical Explanation
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {!explanation ? (
            <div className="text-center py-8">
              <div className="p-4 bg-primary/10 rounded-xl w-fit mx-auto mb-4">
                <Brain className="h-8 w-8 text-primary" />
              </div>
              <h3 className="text-lg font-semibold text-foreground mb-2">
                Generate Medical Insights
              </h3>
              <p className="text-muted-foreground mb-4">
                Get AI-powered medical explanation of your blood analysis results
              </p>
              <Button 
                onClick={generateExplanation} 
                disabled={isGenerating}
                className="bg-gradient-primary hover:opacity-90"
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Brain className="mr-2 h-4 w-4" />
                    Generate Explanation
                  </>
                )}
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="prose prose-sm max-w-none">
                <div className="whitespace-pre-wrap text-foreground leading-relaxed">
                  {explanation}
                </div>
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={generateExplanation}
                  disabled={isGenerating}
                >
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Regenerate
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Follow-up Questions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5 text-primary" />
            Ask Follow-up Questions
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Textarea 
            placeholder="Ask specific questions about the analysis results, treatment options, or request clarification on any findings..."
            value={followUpQuestion}
            onChange={(e) => setFollowUpQuestion(e.target.value)}
            className="min-h-[100px]"
          />
          <Button 
            onClick={handleFollowUpQuestion}
            disabled={!followUpQuestion.trim()}
            className="w-full"
          >
            <MessageSquare className="mr-2 h-4 w-4" />
            Submit Question
          </Button>
          
          <div className="text-sm text-muted-foreground">
            <p className="font-medium mb-2">Example questions:</p>
            <ul className="space-y-1 text-xs">
              <li>• What does elevated neutrophil count mean?</li>
              <li>• Should I be concerned about these results?</li>
              <li>• What follow-up tests might be recommended?</li>
              <li>• How do these results compare to normal ranges?</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      {/* Model Information */}
      <Card>
        <CardHeader>
          <CardTitle>Analysis Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-muted-foreground">Vision Model:</span>
              <p className="font-medium">EfficientNet B0</p>
            </div>
            <div>
              <span className="text-muted-foreground">Language Model:</span>
              <p className="font-medium">Medical LLaMA</p>
            </div>
            <div>
              <span className="text-muted-foreground">Analysis Time:</span>
              <p className="font-medium">12.3 seconds</p>
            </div>
            <div>
              <span className="text-muted-foreground">Confidence:</span>
              <p className="font-medium">94.2% overall</p>
            </div>
          </div>

          <div className="flex gap-2">
            <Badge variant="secondary">Computer Vision</Badge>
            <Badge variant="secondary">Deep Learning</Badge>
            <Badge variant="secondary">Medical AI</Badge>
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="space-y-3">
        <div className="grid grid-cols-2 gap-3">
          <Button 
            variant="outline" 
            onClick={downloadReport}
            className="w-full"
          >
            <Download className="mr-2 h-4 w-4" />
            Download Report
          </Button>
          <Button 
            variant="outline" 
            onClick={shareReport}
            className="w-full"
          >
            <Share className="mr-2 h-4 w-4" />
            Share Results
          </Button>
        </div>
        
        <Button 
          onClick={onNewAnalysis}
          className="w-full bg-gradient-primary hover:opacity-90"
        >
          <RefreshCw className="mr-2 h-4 w-4" />
          Analyze New Sample
        </Button>
      </div>
    </div>
  );
};