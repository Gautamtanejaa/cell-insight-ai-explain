import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Brain, MessageSquare, RefreshCw, Download, Share } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface AnalysisData {
  analysisId: string;
  cellCounts: {
    neutrophils: number;
    lymphocytes: number;
    monocytes: number;
    eosinophils: number;
    basophils: number;
    platelets: number;
    rbcs: number;
  };
  diseases: {
    name: string;
    confidence: number;
    severity: 'low' | 'medium' | 'high';
  }[];
  abnormalities: string[];
}

interface MedicalExplanationProps {
  analysisData: AnalysisData;
  onNewAnalysis: () => void;
}

export const MedicalExplanation: React.FC<MedicalExplanationProps> = ({ 
  analysisData, 
  onNewAnalysis 
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [explanation, setExplanation] = useState('');
  const [followUpQuestion, setFollowUpQuestion] = useState('');
  
  // Reset explanation when analysisData changes (new analysis)
  React.useEffect(() => {
    setExplanation('');
    setFollowUpQuestion('');
  }, [analysisData.analysisId]);
  const { toast } = useToast();

  const generateExplanation = async () => {
    setIsGenerating(true);
    
    try {
      const response = await fetch(`http://localhost:8000/api/medical-explanation/${analysisData.analysisId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to generate explanation');
      }

      const result = await response.json();
      setExplanation(result.explanation);
    } catch (error) {
      console.error('Error generating explanation:', error);
      setExplanation('Failed to generate medical explanation. Please ensure the backend is running and try again.');
    } finally {
      setIsGenerating(false);
    }
  };


  const handleFollowUpQuestion = () => {
    if (!followUpQuestion.trim()) return;
    
    toast({
      title: "Question Submitted",
      description: "Your follow-up question will be processed by the medical AI assistant.",
    });
    
    setFollowUpQuestion('');
  };

  const downloadReport = () => {
    const reportData = {
      timestamp: new Date().toISOString(),
      cellCounts: analysisData.cellCounts,
      diseases: analysisData.diseases,
      abnormalities: analysisData.abnormalities,
      explanation: explanation
    };

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { 
      type: 'application/json' 
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `blood-analysis-report-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Analysis report has been saved to your device.",
    });
  };

  const shareReport = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Blood Cell Analysis Report',
          text: 'Medical analysis report generated by BloodCell AI',
          url: window.location.href
        });
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Link Copied",
        description: "Report link has been copied to clipboard.",
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* AI Medical Explanation */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-primary" />
            AI Medical Explanation
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {!explanation ? (
            <div className="text-center py-8">
              <div className="p-4 bg-primary/10 rounded-xl w-fit mx-auto mb-4">
                <Brain className="h-8 w-8 text-primary" />
              </div>
              <h3 className="text-lg font-semibold text-foreground mb-2">
                Generate Medical Insights
              </h3>
              <p className="text-muted-foreground mb-4">
                Get AI-powered medical explanation of your blood analysis results
              </p>
              <Button 
                onClick={generateExplanation} 
                disabled={isGenerating}
                className="bg-gradient-primary hover:opacity-90"
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Brain className="mr-2 h-4 w-4" />
                    Generate Explanation
                  </>
                )}
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="prose prose-sm max-w-none">
                <div className="whitespace-pre-wrap text-foreground leading-relaxed">
                  {explanation}
                </div>
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={generateExplanation}
                  disabled={isGenerating}
                >
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Regenerate
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Follow-up Questions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5 text-primary" />
            Ask Follow-up Questions
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Textarea 
            placeholder="Ask specific questions about the analysis results, treatment options, or request clarification on any findings..."
            value={followUpQuestion}
            onChange={(e) => setFollowUpQuestion(e.target.value)}
            className="min-h-[100px]"
          />
          <Button 
            onClick={handleFollowUpQuestion}
            disabled={!followUpQuestion.trim()}
            className="w-full"
          >
            <MessageSquare className="mr-2 h-4 w-4" />
            Submit Question
          </Button>
          
          <div className="text-sm text-muted-foreground">
            <p className="font-medium mb-2">Example questions:</p>
            <ul className="space-y-1 text-xs">
              <li>• What does elevated neutrophil count mean?</li>
              <li>• Should I be concerned about these results?</li>
              <li>• What follow-up tests might be recommended?</li>
              <li>• How do these results compare to normal ranges?</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      {/* Model Information */}
      <Card>
        <CardHeader>
          <CardTitle>Analysis Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-muted-foreground">Vision Model:</span>
              <p className="font-medium">EfficientNet B0</p>
            </div>
            <div>
              <span className="text-muted-foreground">Language Model:</span>
              <p className="font-medium">Medical LLaMA</p>
            </div>
            <div>
              <span className="text-muted-foreground">Analysis Time:</span>
              <p className="font-medium">12.3 seconds</p>
            </div>
            <div>
              <span className="text-muted-foreground">Confidence:</span>
              <p className="font-medium">94.2% overall</p>
            </div>
          </div>

          <div className="flex gap-2">
            <Badge variant="secondary">Computer Vision</Badge>
            <Badge variant="secondary">Deep Learning</Badge>
            <Badge variant="secondary">Medical AI</Badge>
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="space-y-3">
        <div className="grid grid-cols-2 gap-3">
          <Button 
            variant="outline" 
            onClick={downloadReport}
            className="w-full"
          >
            <Download className="mr-2 h-4 w-4" />
            Download Report
          </Button>
          <Button 
            variant="outline" 
            onClick={shareReport}
            className="w-full"
          >
            <Share className="mr-2 h-4 w-4" />
            Share Results
          </Button>
        </div>
        
        <Button 
          onClick={onNewAnalysis}
          className="w-full bg-gradient-primary hover:opacity-90"
        >
          <RefreshCw className="mr-2 h-4 w-4" />
          Analyze New Sample
        </Button>
      </div>
    </div>
  );
};